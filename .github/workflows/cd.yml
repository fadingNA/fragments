# Continuous Delivery Workflow
#
# This should happen whenever we push a new tag, and we tag an existing
# commit after we know it's good (e.g., has been tested).
#
# To create a new tag, we also need to update the package.json version:
#
# $ npm version 0.5.0
#
# This will update `version` in package.json to `0.5.0` and create a new
# tag, `v0.5.0` in git. We'll then use this tag (i.e., `v0.5.0`) to tag
# our docker image before we push to AWS.
name: cd

on:
  push:
    # Whenever a new tag is pushed
    tags:
      # Any tag starting with v... should trigger this workflow.
      - 'v**'

jobs:
  # NOTE: this assumes our CI jobs have already passed previously
  # (i.e., that we don't tag a commit manually until we know a build is working)
  aws:
    name: AWS
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      # use build x which is faster than build y
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: logic-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and Push Image to Amzon ECR
      - name: Build and push
        env:
          ECR_REGISTRY: ${{ steps.logic-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{github.ref_name}}
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}, ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest
