# Continuous Delivery Workflow
#
# This should happen whenever we push a new tag, and we tag an existing
# commit after we know it's good (e.g., has been tested).
#
# To create a new tag, we also need to update the package.json version:
#
# $ npm version 0.5.0
#
# This will update `version` in package.json to `0.5.0` and create a new
# tag, `v0.5.0` in git. We'll then use this tag (i.e., `v0.5.0`) to tag
# our docker image before we push to AWS.
name: cd

on:
  push:
    # Whenever a new tag is pushed
    tags:
      # Any tag starting with v... should trigger this workflow.
      - 'v**'

jobs:
  # NOTE: this assumes our CI jobs have already passed previously
  # (i.e., that we don't tag a commit manually until we know a build is working)
  aws:
    name: AWS
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      # use build x which is faster than build y
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

        # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: logic-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and Push Image to Amzon ECR
      - name: Build and push
        env:
          ECR_REGISTRY: ${{ steps.logic-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{github.ref_name}}
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}, ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest

      # Update the Amazon ECS Task Definition with the new image ID
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.logic-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{github.ref_name}}
        with:
          task-definition: fragments-definition.json
          container-name: fragments_cluster
          # Use the image we just built and pushed to ECR for this tag
          image: ${{env.ECR_REGISTRY}}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}
          # Add all the necessary environment variables, using GitHub Encrypted Secrets
          # for any values that should not be checked into git directly.  Here are
          # a few to get you started, but you should fill in the rest yourself.
          # AWS_ACCESS_KEY_ID={{ secrets.AWS_ACCESS_KEY_ID }}
          #AWS_SECRET_ACCESS_KEY={{ secrets.AWS_SECRET_ACCESS_KEY }}
          #AWS_SESSION_TOKEN={{ secrets.AWS_SESSION_TOKEN }}
          environment-variables: |
            LOG_LEVEL=info
            NODE_ENV=production
            AWS_REGION=us-east-1
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            API_URL=${{ secrets.API_URL }}
            AWS_COGNITO_CLIENT_ID=${{ secrets.AWS_COGNITO_CLIENT_ID }}
            AWS_COGNITO_HOSTED_UI_DOMAIN=${{ secrets.AWS_COGNITO_HOSTED_UI_DOMAIN }}
            AWS_COGNITO_POOL_ID=${{ secrets.AWS_COGNITO_POOL_ID }}
            AWS_S3_ENDPOINT_URL=${{ secrets.AWS_S3_ENDPOINT_URL }}
            HTPASSWD_FILE=${{ secrets.HTPASSWD_FILE }}
            AWS_S3_BUCKET_NAME=nplodthong-fragments
            OAUTH_SIGN_IN_REDIRECT_URL=${{ secrets.OAUTH_SIGN_IN_REDIRECT_URL }}
            OAUTH_SIGN_OUT_REDIRECT_URL=${{ secrets.OAUTH_SIGN_OUT_REDIRECT_URL }}
            PORT=${{ secrets.PORT }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          cluster: fragmentsCluster
          service: fragments_cluster-service
          wait-for-service-stability: true
